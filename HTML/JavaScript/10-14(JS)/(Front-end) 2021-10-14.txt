2021-10-14
───────────────────────────────────────────────────────────────────────────
<!--head에 script를 넣으면 자동실행!-->
    <script>
      // 현재문서가 읽어지면. 준비를 해달라;
      $(document).ready(function () {
        // 버튼을 누르는 순간(제일 기본적인 것.)
        $("p").click(function () {
          alert("텍스트가 선택되었습니다.");
        });
      });

ㆍjQuery에서는 모든 글자가 버튼이 될 수 있다.
ㆍ대신 필수로 cursor: pointer로 마우스를
ㆍ올렸을때 모양이 바뀌게 해줘야 한다.


ㆍfocusin : 마우스 클릭시 커서가 깜빡거리는 것
ㆍfocusout : 밖 찍을시 커서 없어짐

─────────────────────────────────────────────────────────────────────────────────────────
  $(document).ready(function () {
        $("div").focusin(function () {
          $(this).css({ "background-color": "#ffffcc" });
        }); // ↑ this 자기 자신. div를 잡으면 한 화면에 너무 많이 
    });                          있으니 this로 자기 자신을 잡는다.

    '' "" 차이는 어느것을 우선 순위로 잡을지 구분할때 따로 쓴다.
     └────(뭘 먼저 써도 상관없음)
─────────────────────────────────────────────────────────────────────────────────────────
ㆍmousedown : 마우스를 계속 누르고 있는 상태(클릭 꾹)
ㆍmouseup : mousedown 후 뗀 상태

ㆍmousemove : 마우스를 움직이는 상태
ㆍpageX : 페이지를 가로로 움직임
ㆍpageY : 페이지를 세로로 움직임
ㆍE, Event : 

ㆍenterleave
─────────────────────────────────────────────────────────────────────────────────────────
// mousemove
$(document).ready(function () {
        //                                ↓
        $(document).mousemove(function (event) {
          // function (event)에서 event란 mousemove가 작동된 상태를 하나의 객체로 설정.
          $("span").text(
            // text() $(대상).text()라고 한다면 대상 안에 어떤값을 글자로 표현

            // 움직이는 이벤트를 X, Y값을 span에 text로 나타내라.
            "X값 : " + event.pageX + "," + " Y값 : " + event.pageY
            // pageX 현재 페이지의 좌표값 x를 의미, pageY 현재 페이지의 좌표값 Y를 의미
          );
        });
      });
─────────────────────────────────────────────────────────────────────────────────────────
ㆍon 메소드 : 하나의 대상에 여러개의 기능을 줄 수 있다.
    └─굳이 함수를 두개씩 실행 안해도 한 함수에 여러개의 스타일을 줄 수 있다.
─────────────────────────────────────────────────────────────────────────────────────────
─────────────────────────────────────────────────────────────────────────────────────────
─────────────────────────────────────────────────────────────────────────────────────────
정리
1. ┌─$(설정할 태그).click(function(){});
   │    : 버튼을 한번 누르는 순간 적용
2. └─$(설정할 태그).dblclick(function(){});
        : 버튼을 두번 누르는 순간 적용

3. ┌─$(설정할 태그).focusin(function(){});
   │    : 클릭해서 커서가 깜빡 거릴때
4. └─$(설정할 태그).focusout(function(){});
        : 영역 밖을 클릭해서 커서가 벗어날때

5. $(설정할 태그).hover(function(){});
        : 마우스를 태그에 올릴때

6. ┌─$(설정할 태그).mouseover(function(){});
   │    : 마우스를 태그에 올릴때
7. └─$(설정할 태그).mouseout(function(){});
        : 마우스를 태그에서 내릴때

8. ┌─$(설정할 태그).mousedown(function(){});
   │    : 마우스로 태그를 꾹 누를때
9. └─$(설정할 태그).mouseup(function(){});
        : 마우스로 태그를 꾹 누른뒤 뗄때

10. $(설정할 태그).mousemove(function(){});
        : 마우스를 움직일때

11. ┌─$(설정할 태그).mouseenter(function(){});
    │   : 마우스를 태그의 영역 안에 넣을때
12. └─$(설정할 태그).mouseleave(function(){});
        : 마우스를 태그의 영역 밖으로 나갈때

13. $(설정할 태그).on(function(){});
        : 여러개의 함수를 한곳에 주고 싶을때 사용

────────────────────────────────────────────────────────────────────────
중요 : next(나의 다음 요소) parent(나의 부모 요소) find(내안에 요소 중)

parent()  : 태그 바로 위 부모 하나만 적용
parents() : 태그 기준 위 조상 전체 적용

────────────────────────────────────────────────────────────────────────
is() 메소드 : 존재 유무(상태)를 확인























